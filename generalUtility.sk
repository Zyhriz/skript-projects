# CREDIT GOES TO @zyhriz ON TIKTOK
# github.com/Zyhriz/skript-projects/


options:
	lehmer-seed: 65537 # The default seed. Can be modified by passing a number in the function

	
	# Only change these if you know what you're doing
	lehmer-a: 16807
	lehmer-m: 2147483647

# map() function in processing; maps a number from one range to another
function map(n: number, orgfrom: number, orgto: number, newfrom: number, newto: number) :: number:
	set {_r} to ({_n} - {_orgfrom}) / ({_orgto} - {_orgfrom}) * ({_newto} - {_newfrom}) + {_newfrom}
	return {_r}

#levenshtein distance. returns the amount of insertions, deletions, or substitutions needed to convert one string to another
function lev(a: string, b: string) :: number:
	set {_la} to length of {_a}
	set {_lb} to length of {_b}
	set {_taila} to subtext of {_a} from character 2 to character {_la}
	set {_tailb} to subtext of {_b} from character 2 to character {_lb}
	if {_lb} = 0:
		return {_la}
	if {_la} = 0:
		return {_lb}
	if character 1 of {_a} = character 1 of {_b}:
		return lev({_taila}, {_tailb})
	return 1 + min(lev({_taila}, {_b}), lev({_a}, {_tailb}), lev({_taila}, {_tailb}))

#hamming distance. returns the number of characters different between 2 strings *of the same length*
#returns -1 if the strings are of different size
function hamming(a: string, b: string) :: integer:
	if length of {_a} isn't length of {_b}:
		return -1
	set {_a::*} to split {_a} at ""
	set {_b::*} to split {_b} at ""
	loop size of {_a} times:
		{_a::%loop-number%} = {_b::%loop-number%}
		add 1 to {_r}
	return {_r}

#jaro similarity. returns the similarity of 2 strings.
#1 = exact match. 0 = no similarity.
function jaro(a: string, b: string) :: number:
	# TODO

# lehmer random number algorithm. input a seed and it outputs a number
function lehmer(seed: number = {@lehmer-seed}):
	set {_r} to mod(lehmer({_seed} - 1)*{@lehmer-a}, {@lehmer-m})
	return {_r}
# a modified lehmer algorithm that isn't recursive. only use this if you're really limited on storage.
function fast_lehmer(seed: number = {@lehmer-seed}):
	set {_r} to mod({_seed}*{@lehmer-a}, {@lehmer-m})/{@lehmer-m}
	return {_r}