options:
	file: plugins/Skript/Databases/pvp.yaml
	console-logging: 3
	# console-logging priorities:
	# 1: sending literally everything
	# 2: avoids pointless messages and otherwise unnecessary info
	# 3: only sends error messages
	# 4: disabled
	console-prefix: [PVP.SK]

# EVENTS ====================

on load:
	pv_verifyFile()

death of player:
	if attacker is a player:
		if name of attacker's tool is set:
			set death message to pv_pullMessage("death", "pvp.set")
		else:
			set death message to pv_pullMessage("death", "pvp.unset")
	else:
		set death message to pv_pullMessage("death", "%damage cause%")
	# death message fixing:
	replace all "[victim]" in death message with name of victim
	replace all "[attacker]" in death message with name of attacker
	replace all "[tool.attacker]" in death message with name of attacker's tool
	set death message to colored death message

# UTILS =====================

function pv_consoleLog(m: string, priority: integer = 1):
	{@console-logging} is less than or equal to {_priority}
	send "{@console-prefix} %{_m}%" to console

function pv_verifyFile():
	if file "{@file}" doesn't exist:
		pv_consoleLog("File {@file} doesn't exist! Creating one now.", 3)
		create file "{@file}"
		pv_consoleLog("Done!", 3)
	pv_reloadYaml()

function pv_reloadYaml():
	pv_consoleLog("Loading the yaml file, this might take a bit...", 2)
	load yaml "{@file}" as "db"
	pv_consoleLog("Done!", 2)

function pv_pullMessage(g: string, p: string) :: string:
	pv_verifyFile()
	set {_ms::*} to yaml list "%{_g}%.%{_p}%" of "db"
	if {_ms::1} isn't set:
		set {_ms::*} to yaml list "%{_g}%.placeholder" of "db"
	set {_m} to random element out of {_ms::*}
	return {_m}